TILDA  -*- mode: org; fill-column: 82 -*-
#+CATEGORY: tilda
#+STARTUP: content
#+seq_todo: TODO STARTED(s@/@) WAITING(w@/@) DELEGATED(l@/@) APPT | DONE(d@/@) DEFERRED(f@/@) CANCELLED(x@/@) IDEA(i/@)
#+TAGS: { SCHOOL(s) BLOG(b) TIL(t) }
#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

* Tilda

** DONE move tilda out of prelude
CLOSED: [2019-06-25 Tue 10:23] SCHEDULED: <2019-06-25 Tue>
- State "DONE"       from "STARTED"    [2019-06-25 Tue 10:23] \\
  tilda now resides in its own single collection package
- State "STARTED"    from "TODO"       [2019-06-25 Tue 09:57]
:LOGBOOK:
CLOCK: [2019-06-25 Tue 09:57]--[2019-06-25 Tue 10:23] =>  0:26
:END:

** CANCELLED allow table syntax
CLOSED: [2019-06-25 Tue 06:38] SCHEDULED: <2019-06-24 Mon>

- State "CANCELLED"  from "TODO"       [2019-06-25 Tue 06:38] \\
  Now that I think about it, the feature doesn't make any sense. When threading all
  it takes to mimic the same semantics is to add an extra key lookup step. With the
  two : and :: procedures that I now have both table and key could be computed.
~:key
~.key
~::key
~..key

t:~
t.~
t::~
t..~

also undefined aware versions

~:key?
~.key?
~::key?
~..key?

t:~?
t.~?
t::~?
t..~?

don't forget that ~id is also possible

** TODO consider replacing all occurrences of ~ in clauses

so we don't have to do intermediate #:as binding e.g.
#+begin_src racket
  ;; atm have to write this
  (~> '()
      (cons 1 ~)
      (~> ~
          #:as a
          #:when list? a
          (cons 2 ~))
      (cons 3 ~))

  ;; but I'd rather write this
  (~> '()
      (cons 1 ~)
      (~> ~
          #:when list? ~
          (cons 2 ~))
      (cons 3 ~))
#+end_src

We'll have to recognize clauses like that and lift ~ value so we don't recompute
for every ~.

** DONE short circuit ~> [2/2]
CLOSED: [2019-06-25 Tue 17:57] SCHEDULED: <2019-06-25 Tue>

- State "DONE"       from "TODO"       [2019-06-25 Tue 17:57]
*** DONE #:when and #:unless to take predicate and escape value
CLOSED: [2019-06-25 Tue 16:05] SCHEDULED: <2019-06-25 Tue>
- State "DONE"       from "STARTED"    [2019-06-25 Tue 16:05] \\
  Wow. I found use for both ~syntax-parameter~ and ~make-rename-transformer~!
- State "STARTED"    from "TODO"       [2019-06-25 Tue 15:08]
:LOGBOOK:
CLOCK: [2019-06-25 Tue 15:08]--[2019-06-25 Tue 16:05] =>  0:57
:END:

dealing with expression in the first position for these is awkward. We pretty much
always want to test something (probably ~) and either escape or report an error.

Most common escape value is probably just #f. Otherwise its an expression to
compute the value used as the resurt of the entire ~>. Could just as easily throw
an error.

Because we can report errors here, there is no longer any need to #:guard, so
we'll drop it.

*** DONE treat ~pred? to short circuit unless (pred? ~)
CLOSED: [2019-06-25 Tue 17:56] SCHEDULED: <2019-06-25 Tue>
- State "DONE"       from "STARTED"    [2019-06-25 Tue 17:56] \\
  seems to work
- State "STARTED"    from "TODO"       [2019-06-25 Tue 16:37]
:LOGBOOK:
CLOCK: [2019-06-25 Tue 16:37]--[2019-06-25 Tue 17:56] =>  1:19
:END:

Technically #:when and #:unless suffice, but they stand out and require the 2nd
argument as the value to escape with. Typically we just want to return #f (the
Racket default in such cases). Hence this syntactic convenience:
#+begin_src racket
  (~> t
      (get ~? :foo)
      (get ~table? :bar))

  ;; equivalent to =>

  (~> t            #:unless ? #f
      (get ~ :foo) #:unless table? #f
      (get ~ :bar))
#+end_src

note that ~id e.g. ~table are treated normally not as predicates to be checked
therefore they serve as reading aids.
